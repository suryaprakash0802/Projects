Step 1: Set Up Jenkins
## Install Jenkins:
## On Ubuntu:

sudo apt update
sudo apt install openjdk-11-jdk -y
wget -q -O - https://pkg.jenkins.io/debian/jenkins.io.key | sudo apt-key add -
sudo sh -c 'echo deb http://pkg.jenkins.io/debian-stable binary/ > /etc/apt/sources.list.d/jenkins.list'
sudo apt update
sudo apt install jenkins -y
sudo systemctl start jenkins
sudo systemctl enable jenkins

## Access Jenkins:
Open your web browser and navigate to http://localhost:8080. Follow the setup instructions, including unlocking Jenkins, installing plugins, and creating an admin user.

Step 2: Integrate Jenkins with Git
## Install Git Plugin:

- Go to Manage Jenkins > Manage Plugins.
- In the Available tab, search for "Git Plugin" and install it.

## Configure Git:

- Go to Manage Jenkins > Global Tool Configuration.
- Under Git, add a new Git installation (if not already present) by providing the Git executable path.

Step 3: Create a Jenkins Pipeline Job
## Create a New Job:

- Go to the Jenkins dashboard.
- Click on New Item.
- Enter an item name and select Pipeline. Click OK.

##Configure the Pipeline:

- In the Pipeline section, choose Pipeline script from SCM.
- Select Git and provide the repository URL and credentials (if required).
- Specify the branch to build, typically */main or */master.
- Define the Script Path if your Jenkinsfile is not in the root directory (e.g., Jenkinsfile).
- Add a Jenkinsfile to Your Repository:
- Create a Jenkinsfile in the root of your Git repository with the following content:

pipeline {
    agent any

    environment {
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
    }

    stages {
        stage('Checkout') {
            steps {
                git 'https://github.com/suryaprakash0802/DevOpsClassCodes.git'
            }
        }
        
        stage('Build') {
            steps {
                sh 'make build' // Replace with your build commands
            }
        }

        stage('Test') {
            steps {
                sh 'make test' // Replace with your test commands
            }
        }

        stage('Deploy') {
            steps {
                withAWS(credentials: 'aws-credentials-id', region: 'us-east-1') {
                    sh './deploy.sh' // Replace with your deploy script
                }
            }
        }
    }

    post {
        always {
            archiveArtifacts artifacts: '**/target/*.jar', allowEmptyArchive: true
            junit 'target/test-*.xml'
        }
    }
}

## Adjust the stages and steps according to your project's requirements.

Step 4: Configure AWS for Deployment
Install AWS CLI on Jenkins:

## On Jenkins server:

sudo apt install awscli -y

## Configure AWS Credentials in Jenkins:

- Go to Manage Jenkins > Manage Credentials > Global > Add Credentials.
- Select AWS Credentials and provide your AWS Access Key ID and Secret Access Key.
- Create a Deploy Script:
- Create a deploy.sh script in your repository:

#!/bin/bash

# Variables
APP_NAME="my-app"
S3_BUCKET="my-app-bucket"
ENVIRONMENT="production"

# Package your application
zip -r ${APP_NAME}.zip .

# Upload to S3
aws s3 cp ${APP_NAME}.zip s3://${S3_BUCKET}/${APP_NAME}.zip

# Deploy using AWS CLI or AWS CodeDeploy
# Example: aws deploy create-deployment --application-name ${APP_NAME} --deployment-group-name ${ENVIRONMENT} --s3-location bucket=${S3_BUCKET},key=${APP_NAME}.zip,bundleType=zip

## Make sure to give execute permissions to the script:

chmod +x deploy.sh

Step 5: Run the Pipeline and Resolve Issues
## Trigger the Pipeline:

- Go to the Jenkins job and click on Build Now.

## Monitor the Build:

## Click on the build number to view the build logs and monitor the progress.
## Resolve Issues:

## Build Failures: Check the logs to identify the cause of failures (e.g., compilation errors, missing dependencies).
Deployment Failures: Ensure AWS credentials are correctly configured and that the deploy script works as expected.
Continuous Integration:

NOTE: Set up webhooks on your Git repository to trigger Jenkins builds on every commit.
